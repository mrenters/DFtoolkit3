#!/usr/bin/env python
#
# Copyright 2021-2023, Martin Renters
#
# This file is part of DFtoolkit
#
# DFtoolkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DFtoolkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DFtoolkit.  If not, see <http://www.gnu.org/licenses/>.
#
'''Generate an Excel file of changes between two DFsetup files'''

import argparse

from dftoolkit import __version__
from dftoolkit.errors import setup_logging, print_exception
from dftoolkit.study import Study
from dftoolkit.schemadiff import SchemaDiffXLSX

#########################################################################
# MAIN
#########################################################################
def main():
    '''Command line interface to schema diff report'''
    parser = argparse.ArgumentParser(
        description='Generate an Excel of study changes'
    )
    parser.add_argument('--source', required=True,
                        type=argparse.FileType('r'),
                        help='source schema file')
    parser.add_argument('--target', required=True,
                        type=argparse.FileType('r'),
                        help='target schema file')
    parser.add_argument('--xlsx', default='schemadiff.xlsx',
                        help='output Excel filename')
    parser.add_argument('--verbose', action='count', default=0,
                        help='enable additional debugging information')
    parser.add_argument('--version', action='version',
                        version='%(prog)s {vers}'.format(vers=__version__))
    args = parser.parse_args()

    setup_logging(args.verbose)

    try:
        source = Study(None)
        source.load_setup(args.source.read())
        target = Study(None)
        target.load_setup(args.target.read())
        changes = target.changes(source)
        xlsx = SchemaDiffXLSX(args.xlsx)
        xlsx.generate(changes)

    except Exception:
        print_exception(args.verbose)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
