#!/usr/bin/env python
#
# Copyright 2021-2022, Martin Renters
#
# This file is part of DFtoolkit
#
# DFtoolkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DFtoolkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DFtoolkit.  If not, see <http://www.gnu.org/licenses/>.
#
'''Generate the intermediate database used by the study closeout report'''

import argparse
import logging
import sys

from dftoolkit import __version__, study_from_files
from dftoolkit.rangelist import SubjectList, RangeListAction
from dftoolkit.sqldb import SQLDB
from dftoolkit.errors import setup_logging, print_exception

logger = logging.getLogger(__name__)

#########################################################################
# MAIN
#########################################################################
def main():
    '''Command line interface to generate intermediate study closeout DB'''
    parser = argparse.ArgumentParser(
        description='This program generates the intermediate database used '
                    'by the study closeout report'
    )
    parser.add_argument('--studydir', required=True,
                        help='sets study directory')
    parser.add_argument('--db', default='data.db',
                        help='sets output SQL database name')
    parser.add_argument('--ids', default=SubjectList(default_all=True),
                        action=RangeListAction,
                        help='include only listed subject ids')
    parser.add_argument('--verbose', action='count', default=0,
                        help='enable additional debugging information')
    parser.add_argument('--version', action='version',
                        version='%(prog)s {vers}'.format(vers=__version__))
    args = parser.parse_args()

    setup_logging(args.verbose)

    study = study_from_files(args.studydir, args.verbose)

    try:
        sql = SQLDB(args.db)
        sql.initialize()
        sql.populate(study, args.ids)
    except Exception:
        print_exception(args.verbose)
        sys.exit(2)

if __name__ == '__main__':
    main()
