#!/usr/bin/env python
#
# Copyright 2021-2022, Martin Renters
#
# This file is part of DFtoolkit
#
# DFtoolkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DFtoolkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DFtoolkit.  If not, see <http://www.gnu.org/licenses/>.
#
'''Generate an Excel file of all the edit checks in a study'''

import argparse
import logging
import os
import xlsxwriter

from dftoolkit import __version__, study_from_files
from dftoolkit.errors import setup_logging, print_exception

#####################################################################
# ECList - Generate an Excel sheet with a list of all fields and
#   edit checks attached to each one.
#####################################################################
def ec2excel(study, xlsx):
    '''Create an Excel file with a list of edit checks'''
    logging.info('Creating Spreadsheet')
    workbook = xlsxwriter.Workbook(xlsx)

    header_format = workbook.add_format({
        'bold': True,
        'font_color': 'white',
        'bg_color': '#244062',
        'align': 'center',
        'valign': 'vcenter',
        'border': 1
    })

    sheet = workbook.add_worksheet('ECs')

    sheet.set_column(0, 0, 30)     # Page
    sheet.set_column(1, 1, 10)     # Plate
    sheet.set_column(2, 2, 10)     # Field#
    sheet.set_column(3, 3, 25)     # Field
    sheet.set_column(4, 4, 25)     # Style
    sheet.set_column(5, 5, 40)     # EC
    row = 1

    for plate in study.plates:
        for field in plate.fields:
            for editcheck in field.ecs:
                sheet.write(row, 0, plate.description)
                sheet.write(row, 1, plate.number)
                sheet.write(row, 2, field.number)
                sheet.write(row, 3, field.name)
                sheet.write(row, 4, field.style_name)
                sheet.write(row, 5, editcheck)
                row += 1

    logging.info('%d edit checks enumerated', row-1)

    if row == 1:
        sheet.write(0, 0, 'No edit checks defined')
    else:
        sheet.add_table(0, 0, row-1, 5, {
            'autofilter': True, 'name': 'EC_Details',
            'columns': [
                {'header': 'Page', 'header_format': header_format},
                {'header': 'Plate', 'header_format': header_format},
                {'header': 'Fld #', 'header_format': header_format},
                {'header': 'Field', 'header_format': header_format},
                {'header': 'Style', 'header_format': header_format},
                {'header': 'EC', 'header_format': header_format},
            ]})

    #####################################################################
    # Add print formatting setup
    #####################################################################
    sheet.set_header('&LEC Report&C{0}&R&P of &N'.format(
        study.study_name.replace("&", "&&")))
    sheet.set_landscape()
    sheet.set_paper(5)
    sheet.fit_to_pages(1, 0)
    sheet.repeat_rows(0)

    #####################################################################
    # Protect sheet from changes and save
    #####################################################################
    sheet.hide_gridlines(2)
    sheet.set_zoom(100)
    logging.info('Saving Spreadsheet')
    workbook.close()

#########################################################################
# MAIN
#########################################################################
def main():
    '''Command line interface to edit check report'''
    parser = argparse.ArgumentParser(
        description='Generates a list of all edit checks in a study'
    )
    parser.add_argument('--studydir', required=True,
                        help='sets study directory')
    parser.add_argument('--xlsx', default='eclist.xlsx',
                        help='output Excel filename')
    parser.add_argument('--verbose', action='count', default=0,
                        help='enable additional debugging information')
    parser.add_argument('--version', action='version',
                        version='%(prog)s {vers}'.format(vers=__version__))
    args = parser.parse_args()

    setup_logging(args.verbose)

    study = study_from_files(args.studydir, args.verbose)

    if not args.xlsx:
        args.xlsx = os.path.join(args.studydir, 'work', 'eclist.xlsx')

    try:
        ec2excel(study, args.xlsx)
    except Exception:
        print_exception(args.verbose)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
