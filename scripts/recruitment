#!/usr/bin/env python
#
# Copyright 2021-2023, Martin Renters
#
# This file is part of DFtoolkit
#
# DFtoolkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DFtoolkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DFtoolkit.  If not, see <http://www.gnu.org/licenses/>.
#
'''Generate a recruitment report'''

import argparse
from datetime import datetime, date

from dftoolkit import __version__, study_from_files
from dftoolkit.errors import setup_logging, print_exception
from dftoolkit.recruitment import RecruitmentReport
from dftoolkit.rangelist import SiteList, RangeListAction

#####################################################################
# MAIN
#####################################################################
def main():
    '''Command line interface to recruitment report'''
    parser = argparse.ArgumentParser(
        description='Generate a recruitment report'
    )
    parser.add_argument('--studydir', required=True,
                        help='sets study directory')
    parser.add_argument('--events', required=True,
                        help='file containing study events to process')
    parser.add_argument('--sites', default=SiteList(default_all=True),
                        action=RangeListAction,
                        help='include only listed sites')
    parser.add_argument('--enddate', default=date.today(),
                        type=lambda d: datetime.strptime(d, '%Y-%m-%d').date(),
                        help='date to end reporting on')
    parser.add_argument('--ndays', default=90, type=int,
                        help='number of days to use for statistics')
    parser.add_argument('--target', default=0, type=int,
                        help='total recruitment target')
    parser.add_argument('--xlsx', default='recruitment.xlsx',
                        help='output Excel filename')
    parser.add_argument('--verbose', action='count', default=0,
                        help='enable additional debugging information')
    parser.add_argument('--version', action='version',
                        version='%(prog)s {vers}'.format(vers=__version__))

    args = parser.parse_args()
    setup_logging(args.verbose)

    study = study_from_files(args.studydir, args.verbose)

    recruitment = RecruitmentReport(study, {
        'enddate': args.enddate,
        'ndays': args.ndays,
        'sites': args.sites,
        'target': args.target
    })
    recruitment.read_events(args.events)
    recruitment.generate_xlsx(args.xlsx)

if __name__ == '__main__':
    main()
